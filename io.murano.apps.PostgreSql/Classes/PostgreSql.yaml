Namespaces:
  =: io.murano.apps
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system


Name: PostgreSql

Extends: PostgreSqlBase

Properties:
  instance:
    Contract: $.class(res:Instance).notNull()

Workflow:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $._environment.reporter.report($this, 'Creating VM for PostgreSql')
          - $securityGroupIngress:
              - ToPort: 5432
                FromPort: 5432
                IpProtocol: tcp
                External: true
          - $.getCloud().securityGroupManager.addGroupIngress($securityGroupIngress)
          - $.instance.deploy()
          - $resources: new(sys:Resources)
          # Deploy PostgreSql
          - $._environment.reporter.report($this, 'Instance is created. Deploying PostgreSql')
          - $template: $resources.yaml('DeployPostgreSql.template')
          - $.instance.agent.call($template, $resources)
          - $._environment.reporter.report($this, 'PostgreSql application is installed.')
          - If: $.instance.assignFloatingIp
            Then:
              - $.publicIp: $.instance.floatingIpAddress
            Else:
              - $.publicIp: $.instance.ipAddresses[0]
          - $.setAttr(deployed, true)


  createDatabase:
    Arguments:
      - database:
          Contract: $.string().notNull()
      - username:
          Contract: $.string().notNull()
      - password:
          Contract: $.string().notNull()
    Body:
      - $.deploy()
      - $._environment.reporter.report($this, 'Configuring ' + $database + ' database.')
      # Configure Database on PostgreSQL
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('ConfigurePostgreSqlDatabase.template').bind(dict(
            database => $database,
            username => $username,
            password => $password
          ))
      - $.instance.agent.call($template, $resources)
      - $._environment.reporter.report($this, 'Database configured')



